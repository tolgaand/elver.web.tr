// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enum types
enum UserRole {
    USER
    ADMIN
    MODERATOR
}

enum UserStatus {
    ACTIVE
    PENDING
    BANNED
    DELETED
}

enum HelpStatus {
    PENDING
    INPROGRESS
    COMPLETED
    CANCELED
}

// Models
model User {
    id                String    @id @default(cuid())
    phone             String?   @unique
    email             String?   @unique
    name              String?
    surname           String?
    image             String?
    emailVerified     DateTime?
    role              UserRole  @default(USER)
    status            UserStatus @default(ACTIVE)
    verified          Boolean   @default(true)
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    lastLoginAt       DateTime?
    lastLocationLat   Float?
    lastLocationLng   Float?
    lastLocationTime  DateTime?
    

    referralCode      String    @unique
    referredBy        User?     @relation("UserReferrals", fields: [referredById], references: [id], onDelete: Restrict, onUpdate: Restrict)
    referredById      String?
    referrals         User[]    @relation("UserReferrals")
    invitationLimit   Int       @default(5)
    

    dailyPostLimit    Int       @default(3)
    dailyPostCount    Int       @default(0)
    lastPostCountReset DateTime?
    

    needPosts         NeedPost[]
    helpPosts         HelpPost[]
    helpOffers        HelpOffer[]
    accounts          Account[]
    sessions          Session[]
    feedbacks         Feedback[]

    @@index([phone])
    @@index([email])
    @@index([referralCode])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id          String   @id @default(cuid())
    name        String   @unique
    slug        String   @unique
    description String?
    icon        String?
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    

    needPosts   NeedPost[]
    helpPosts   HelpPost[]
    subCategories SubCategory[]
}

model SubCategory {
    id          String   @id @default(cuid())
    name        String
    slug        String
    description String?
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    

    category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId   String
    needPosts    NeedPost[]
    helpPosts    HelpPost[]
    
    @@unique([categoryId, slug])
}

model Tag {
    id        String   @id @default(cuid())
    name      String   @unique
    value     String   @unique
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    

    needPosts NeedPostTag[]
    helpPosts HelpPostTag[]
}

model NeedPost {
    id            String       @id @default(cuid())
    title         String
    description   String
    status        HelpStatus   @default(PENDING)
    locationLat   Float
    locationLng   Float
    locationName  String?
    isUrgent      Boolean      @default(false)
    isAnonymous   Boolean      @default(false)
    contactMethod String?
    contactDetail String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    expiresAt     DateTime
    isExpired     Boolean      @default(false)
    

    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId        String
    category      Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    categoryId    String
    subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    subCategoryId String?
    tags          NeedPostTag[]
    helpOffers    HelpOffer[]
}

model HelpPost {
    id            String       @id @default(cuid())
    title         String
    description   String
    status        HelpStatus   @default(PENDING)
    locationLat   Float
    locationLng   Float
    locationName  String?
    availableFrom DateTime?
    availableTo   DateTime?
    contactMethod String?
    contactDetail String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    

    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId        String
    category      Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    categoryId    String
    subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    subCategoryId String?
    tags          HelpPostTag[]
}

model HelpOffer {
    id          String     @id @default(cuid())
    status      HelpStatus @default(PENDING)
    message     String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    

    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId      String
    needPost    NeedPost   @relation(fields: [needPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    needPostId  String
}

// Join tables
model NeedPostTag {
    needPost    NeedPost   @relation(fields: [needPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    needPostId  String
    tag         Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    tagId       String
    
    @@id([needPostId, tagId])
}

model HelpPostTag {
    helpPost    HelpPost   @relation(fields: [helpPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    helpPostId  String
    tag         Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    tagId       String
    
    @@id([helpPostId, tagId])
}

// Kullanıcı önerileri ve geri bildirimleri
model Feedback {
    id          String   @id @default(cuid())
    type        String
    title       String
    content     String
    status      String   @default("PENDING")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    

    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId      String
    
    @@index([userId])
    @@index([status])
}
