// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["driverAdapters"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Enum types
enum UserRole {
    USER
    ADMIN
    MODERATOR
}

enum UserStatus {
    ACTIVE
    PENDING
    BANNED
    DELETED
}

enum HelpStatus {
    PENDING
    INPROGRESS
    COMPLETED
    CANCELED
}

// Models
model User {
    id                String    @id @default(cuid())
    phone             String?   @unique
    email             String?   @unique
    name              String?
    surname           String?
    image             String?   // NextAuth image field
    emailVerified     DateTime? // NextAuth emailVerified field
    role              UserRole  @default(USER)
    status            UserStatus @default(ACTIVE) // Default to ACTIVE for Google Auth
    verified          Boolean   @default(true)    // Google Auth users are verified by default
    createdAt         DateTime  @default(now())
    updatedAt         DateTime  @updatedAt
    lastLoginAt       DateTime?
    lastLocationLat   Float?
    lastLocationLng   Float?
    lastLocationTime  DateTime?
    
    // Referral system
    referralCode      String    @unique @default(cuid()) // Kullanıcının benzersiz davet kodu
    referredBy        User?     @relation("UserReferrals", fields: [referredById], references: [id], onDelete: Restrict, onUpdate: Restrict)
    referredById      String?
    referrals         User[]    @relation("UserReferrals")
    invitationLimit   Int       @default(5) // Bir kullanıcının yapabileceği maksimum davet sayısı
    
    // Daily post limits
    dailyPostLimit    Int       @default(3)  // Günlük açılabilecek ilan sayısı
    dailyPostCount    Int       @default(0)  // Günlük açılan ilan sayısı
    lastPostCountReset DateTime? // Son sayaç sıfırlama tarihi
    
    // Relations
    needPosts         NeedPost[]
    helpPosts         HelpPost[]
    helpOffers        HelpOffer[]
    accounts          Account[]
    sessions          Session[]

    @@index([phone])
    @@index([email])
    @@index([referralCode])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}


model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}


model Category {
    id          String   @id @default(cuid())
    name        String   @unique
    slug        String   @unique
    description String?
    icon        String?
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Relations
    needPosts   NeedPost[]
    helpPosts   HelpPost[]
    subCategories SubCategory[]
}

model SubCategory {
    id          String   @id @default(cuid())
    name        String
    slug        String
    description String?
    isActive    Boolean  @default(true)
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    
    // Relations
    category     Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    categoryId   String
    needPosts    NeedPost[]
    helpPosts    HelpPost[]
    
    @@unique([categoryId, slug])
}

model Tag {
    id        String   @id @default(cuid())
    name      String   @unique
    value     String   @unique
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    // Relations
    needPosts NeedPostTag[]
    helpPosts HelpPostTag[]
}

model NeedPost {
    id            String       @id @default(cuid())
    title         String
    description   String
    status        HelpStatus   @default(PENDING)
    locationLat   Float
    locationLng   Float
    locationName  String?
    isUrgent      Boolean      @default(false)
    isAnonymous   Boolean      @default(false)
    contactMethod String?
    contactDetail String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    
    // Relations
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId        String
    category      Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    categoryId    String
    subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    subCategoryId String?
    tags          NeedPostTag[]
    helpOffers    HelpOffer[]
}

model HelpPost {
    id            String       @id @default(cuid())
    title         String
    description   String
    status        HelpStatus   @default(PENDING)
    locationLat   Float
    locationLng   Float
    locationName  String?
    availableFrom DateTime?
    availableTo   DateTime?
    contactMethod String?
    contactDetail String?
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt
    
    // Relations
    user          User         @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId        String
    category      Category     @relation(fields: [categoryId], references: [id], onDelete: Restrict, onUpdate: Cascade)
    categoryId    String
    subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    subCategoryId String?
    tags          HelpPostTag[]
}

model HelpOffer {
    id          String     @id @default(cuid())
    status      HelpStatus @default(PENDING)
    message     String?
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    
    // Relations
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    userId      String
    needPost    NeedPost   @relation(fields: [needPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    needPostId  String
}

// Join tables
model NeedPostTag {
    needPost    NeedPost   @relation(fields: [needPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    needPostId  String
    tag         Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    tagId       String
    
    @@id([needPostId, tagId])
}

model HelpPostTag {
    helpPost    HelpPost   @relation(fields: [helpPostId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    helpPostId  String
    tag         Tag        @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    tagId       String
    
    @@id([helpPostId, tagId])
}
